#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ТолстыйКлиентУправляемоеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Функция - Новые аргументы вызова метода
//
// Параметры:
//  МетодСсылка	 - СправочникСсылка.скт_Методы - Ссылка на метод, который планируется вызвать
// 
// Возвращаемое значение:
//  Структура - Аргументы для вызова метода
//
Функция НовыеАргументыВызоваМетода(МетодСсылка) Экспорт

	Результат = Новый Структура;
	Результат.Вставить("Формат", 			МетодСсылка.Формат);
	Результат.Вставить("Архивировать", 		МетодСсылка.Архивировать);
	Результат.Вставить("СпособДоставки", 	МетодСсылка.СпособДоставки);
	Результат.Вставить("ПутьДляВыгрузки", 	МетодСсылка.ПутьДляВыгрузки);
	Возврат Результат;

КонецФункции // НовыеАргументыВызоваМетода()

// Процедура - Функция вызова метода по ссылке
//
// Параметры:
//  МетодСсылка			 - СправочникСсылка.скт_Методы - Ссылка на метод, который планируется вызвать
//  ПотокПриемник		 - Поток - Поток, в который будет помещён результат работы метода
//  ВходныеПараметры	 - Структура - см НовыеАргументыВызоваМетода + аргументы самого метода (см ТЧ Аргументы)
//  выхРасширениеФайла	 - Строка - Расширение файла - результата метода. Выходной параметр
//  ЗапросHTTP			 - HTTPЗапрос - Запрос инициатор метода. Используется для подробного логирования
//
Процедура Вызвать(МетодСсылка, ПотокПриемник, Знач ВходныеПараметры = Неопределено, 
	выхРасширениеФайла = Неопределено, ЗапросHTTP = Неопределено) Экспорт 

	Если ВходныеПараметры = Неопределено Тогда
		ВходныеПараметры = Новый Структура;
	КонецЕсли;
	Аргументы = НовыеАргументыВызоваМетода(МетодСсылка);
	ПодготовитьАргументыМетодаПоВходнымДанным(Аргументы, ВходныеПараметры);
	
	Логировать = скт_Настройки.ПрочитатьЗначение("скт_ЛогироватьВызовыМетодов");
	Если Логировать Тогда
		ЗалогироватьНачалоВызова(МетодСсылка, Аргументы, ЗапросHTTP);
	КонецЕсли;
	
	ИмяМетода = МетодСсылка.Код;
	Если Аргументы.Архивировать Тогда
		РасширениеФайла = "zip";
	Иначе
		РасширениеФайла = Перечисления.скт_ВариантыФорматовВыгрузки.РасширениеФайлаДляСохранения(Аргументы.Формат);
	КонецЕсли;
	
	РезультатКомпоновки = ПолучитьРезультатКомпоновки(МетодСсылка, Аргументы);
	
	Если Аргументы.СпособДоставки = Перечисления.скт_СпособыДоставкиРезультата.Непосредственно Тогда
		ВывестиРезультатВыполненияПоФормату(РезультатКомпоновки, МетодСсылка, 
			Аргументы.Формат, ПотокПриемник, Аргументы.Архивировать, РасширениеФайла);
		выхРасширениеФайла = РасширениеФайла;
	Иначе
		ПутьДляВыгрузки = МетодСсылка.ПутьДляВыгрузки;
		ИмяФайлаВыгрузки = ИмяМетода;
		ФайлВыгрузки = Новый Файл(ПутьДляВыгрузки + ИмяФайлаВыгрузки + "." + РасширениеФайла);
		Поток = Новый ФайловыйПоток(ФайлВыгрузки.ПолноеИмя, 
			РежимОткрытияФайла.Создать, ДоступКФайлу.Запись);
		ВывестиРезультатВыполненияПоФормату(РезультатКомпоновки, МетодСсылка, 
			Аргументы.Формат, Поток, Аргументы.Архивировать, РасширениеФайла);
		
		Запись = Новый ЗаписьТекста(ПотокПриемник, КодировкаТекста.UTF8, Символы.ПС, Символы.ПС, Ложь);
		Запись.ЗаписатьСтроку(СтрШаблон("Результат записан в файл: %1", СокрЛП(ФайлВыгрузки.ПолноеИмя)));
		Запись.Закрыть();
		выхРасширениеФайла = "txt";
	КонецЕсли;
	
	Если Логировать Тогда
		ЗалогироватьОкончаниеВызова(МетодСсылка, РезультатКомпоновки, РасширениеФайла, ЗапросHTTP);
	КонецЕсли;
	
КонецПроцедуры // Вызвать()

#КонецОбласти

#Область СлужебныеФункции

Процедура ПодготовитьАргументыМетодаПоВходнымДанным(Аргументы, ВходныеПараметры)

	Если ВходныеПараметры.Свойство("Формат") Тогда 
		Формат = ВходныеПараметры.Формат;
		Если ТипЗнч(Формат) = Тип("Строка") Тогда
			Формат = Перечисления.скт_ВариантыФорматовВыгрузки.ПоИмени(Формат);
		КонецЕсли;
		Если Формат <> Неопределено Тогда
			Аргументы.Формат = Формат;
		КонецЕсли;
		ВходныеПараметры.Удалить("Формат");
	КонецЕсли;
	Если ВходныеПараметры.Свойство("Архивировать") Тогда
		Архивировать = ВходныеПараметры.Архивировать;
		Если ТипЗнч(Архивировать) <> Тип("Булево") Тогда
			Архивировать = НРег(Архивировать) = "true" Или Архивировать = "1";
		КонецЕсли;
		Аргументы.Архивировать = Архивировать;
		ВходныеПараметры.Удалить("Архивировать");
	КонецЕсли;
	Если ВходныеПараметры.Свойство("СпособДоставки") Тогда
		СпособДоставки = ВходныеПараметры.СпособДоставки;
		Если ТипЗнч(СпособДоставки) = Тип("Строка") Тогда
			СпособДоставки = ?(СпособДоставки = "1", Перечисления.скт_СпособыДоставкиРезультата.ВыгрузкаВКаталог, 
				Перечисления.скт_СпособыДоставкиРезультата.Непосредственно);
		КонецЕсли;
		Аргументы.СпособДоставки = СпособДоставки;
		ВходныеПараметры.Удалить("СпособДоставки");
	КонецЕсли;
	Если ВходныеПараметры.Свойство("ПутьДляВыгрузки") Тогда
		Аргументы.ПутьДляВыгрузки = ВходныеПараметры.ПутьДляВыгрузки;
		ВходныеПараметры.Удалить("ПутьДляВыгрузки");
	КонецЕсли;
	
	Для Каждого текПараметр Из ВходныеПараметры Цикл
		Если текПараметр.Значение <> Неопределено Тогда
			Аргументы.Вставить(текПараметр.Ключ, текПараметр.Значение);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ВывестиРезультатВыполненияПоФормату(РезультатВыполнения, Метод, Формат, 
	Поток, Архивировать, выхРасширениеФайла)
	
	Если Архивировать Тогда
		ВременныйФайл = СтрШаблон("%1%2.%3", КаталогВременныхФайлов(), Метод.Код, 
			Перечисления.скт_ВариантыФорматовВыгрузки.РасширениеФайлаДляСохранения(Формат));
		ВремПоток = Новый ФайловыйПоток(ВременныйФайл, 
			РежимОткрытияФайла.Создать, ДоступКФайлу.Запись);
		ВывестиРезультатВыполненияПоФормату(РезультатВыполнения, Метод, Формат, ВремПоток, Ложь, выхРасширениеФайла);
		ВремПоток.Закрыть();
		
		Зип = Новый ЗаписьZipФайла(Поток, , , МетодСжатияZIP.Сжатие, 
			УровеньСжатияZIP.Максимальный, , КодировкаИменФайловВZipФайле.UTF8);
		Зип.Добавить(ВременныйФайл, РежимСохраненияПутейZIP.СохранятьОтносительныеПути, 
			РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);
		Зип.Записать();
		УдалитьФайлы(ВременныйФайл);
	Иначе
		Если Формат = Перечисления.скт_ВариантыФорматовВыгрузки.CSV Тогда
			скт_ОбщегоНазначения.CSVПоТаблицеЗначений(РезультатВыполнения, Поток);
		ИначеЕсли Формат = Перечисления.скт_ВариантыФорматовВыгрузки.JSON Тогда
			скт_ОбщегоНазначения.JSONПоТаблицеЗначений(РезультатВыполнения, Поток);
		ИначеЕсли Формат = Перечисления.скт_ВариантыФорматовВыгрузки.XML Тогда
			скт_ОбщегоНазначения.XMLПоТаблицеЗначений(РезультатВыполнения, Поток);
		ИначеЕсли Формат = Перечисления.скт_ВариантыФорматовВыгрузки.ПроизвольнаяСериализация Тогда
			ВыполнитьПроизвольнуюСериализацию(РезультатВыполнения, Метод, Поток, выхРасширениеФайла);
		Иначе
			скт_ОбщегоНазначения.ДвоичныеДанныеТабличногоДокумента(РезультатВыполнения, 
				ТипФайлаТабличногоДокумента[XMLСтрока(Формат)], Поток);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ВыполнитьПроизвольнуюСериализацию(РезультатВыполнения, Метод, Поток, выхРасширениеФайла)

	Алгоритм = скт_ПроизвольныеАлгоритмы.ОбъектВнешнейОбработки(Метод.Сериализация);
	Алгоритм.Сериализовать(РезультатВыполнения, Метод, Поток, выхРасширениеФайла);

КонецПроцедуры

Функция ПолучитьРезультатКомпоновки(Метод, ВходныеПараметры = Неопределено)

	Если ВходныеПараметры = Неопределено Тогда
		ВходныеПараметры = Новый Структура;
	КонецЕсли;
	
	АргументыМетода = Метод.Аргументы;
	ОбязательныеАргументы = АргументыМетода.НайтиСтроки(Новый Структура("Обязательный", Истина));
	Для Каждого текАргумент Из ОбязательныеАргументы Цикл
		Если Не ВходныеПараметры.Свойство(текАргумент.Имя) Тогда
			ВызватьИсключение СтрШаблон("В метод ""%1"" не передан обязательный аргумент ""%2""", Метод.Код, текАргумент.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Источник = Метод.Источник;
	Схема = Источник.Схема.Получить();
	Компоновщик = Справочники.скт_Источники.КомпоновщикНастроек(Источник, Метод.ПользовательскиеНастройки.Получить());
	
	ТаблицаАргументов = АргументыМетода.Выгрузить();
	ТаблицаАргументов.Колонки.Добавить("Значение", Новый ОписаниеТипов);
	
	КонвертироватьАргументыМетода(ТаблицаАргументов, ВходныеПараметры, Метод, Схема, Компоновщик);
	
	НазначитьАргументыПоИмени(ТаблицаАргументов, Компоновщик, ВходныеПараметры);
	НазначитьАргументыПоИдентификаторам(ТаблицаАргументов, Компоновщик, ВходныеПараметры);
	
	ВнешниеНаборыДанных = Неопределено;
	
	Для Каждого текАлгоритм Из Метод.Подготовка.НайтиСтроки(Новый Структура("Активность", Истина)) Цикл
		Алгоритм = скт_ПроизвольныеАлгоритмы.ОбъектВнешнейОбработки(текАлгоритм.Алгоритм);
		Алгоритм.ВыполнитьПодготовкуМетода(Метод, Схема, Компоновщик, ТаблицаАргументов, 
			ВходныеПараметры, ВнешниеНаборыДанных);
	КонецЦикла;
	
	Приемник = Новый ТабличныйДокумент;
	Если ЭтоФорматДляВыводаВТаблицу(ВходныеПараметры.Формат) Тогда
		Приемник = Новый ТаблицаЗначений;
	КонецЕсли;
	
	Возврат Справочники.скт_Источники.Скомпоновать(Источник
		, Компоновщик.ПолучитьНастройки(), Приемник, ВнешниеНаборыДанных);

КонецФункции // ПолучитьРезультат()

Процедура КонвертироватьАргументыМетода(Аргументы, ВходныеПараметры, Метод, Схема, Компоновщик)

	Для Каждого текАргумент Из Аргументы Цикл
		
		// Пропустим, если значение аргумента не передали
		Если Не ВходныеПараметры.Свойство(текАргумент.Имя) Тогда
			Продолжить;
		КонецЕсли;
		
		Если текАргумент.Конвертация.Пустая() Тогда
			текАргумент.Значение = ВходныеПараметры[текАргумент.Имя];
		Иначе
			Алгоритм = скт_ПроизвольныеАлгоритмы.ОбъектВнешнейОбработки(текАргумент.Конвертация);
			текАргумент.Значение = Алгоритм.ПолучитьРезультат(ВходныеПараметры[текАргумент.Имя], 
				Метод, Схема, Компоновщик, текАргумент);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура НазначитьАргументыПоИмени(ТаблицаАргументов, Компоновщик, ВходныеПараметры)

	Для Каждого текАргумент Из ТаблицаАргументов Цикл
		
		// Пропустим, если значение аргумента не передали
		Если Не ВходныеПараметры.Свойство(текАргумент.Имя) Тогда
			Продолжить;
		КонецЕсли;
		
		// Этот параметр имеет явную привязку к пользовательской настройке.
		// Значение будет привоено в процедуре НазначитьАргументыПоИдентификаторам
		Если Не ПустаяСтрока(текАргумент.ИдентификаторНастройки) Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрКомпоновки = Новый ПараметрКомпоновкиДанных(текАргумент.Имя);
		СтрокаПараметра = Компоновщик.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПараметрКомпоновки);
		Если СтрокаПараметра <> Неопределено Тогда
			Если Не ПустаяСтрока(СтрокаПараметра.ИдентификаторПользовательскойНастройки) Тогда
				ПользовательскаяНастройка = Компоновщик.ПользовательскиеНастройки.Элементы.Найти(
					СтрокаПараметра.ИдентификаторПользовательскойНастройки);
				Если ПользовательскаяНастройка <> Неопределено Тогда
					СтрокаПараметра = ПользовательскаяНастройка;
				КонецЕсли;
			КонецЕсли;
			СтрокаПараметра.Использование = Истина;
			СтрокаПараметра.Значение = текАргумент.Значение;
			Продолжить;
		КонецЕсли;
		
		// Если не нашли параметр, попробуем найти отбор
		ИскомоеПоле = Новый ПолеКомпоновкиДанных(текАргумент.Имя);
		Для Каждого текОтбор Из Компоновщик.Настройки.Отбор.Элементы Цикл
			Если ТипЗнч(текОтбор) <> Тип("ЭлементОтбораКомпоновкиДанных")
				Или текОтбор.ЛевоеЗначение <> ИскомоеПоле Тогда 
				Продолжить;
			КонецЕсли;
			Если Не ПустаяСтрока(текОтбор.ИдентификаторПользовательскойНастройки) Тогда
				ПользовательскаяНастройка = Компоновщик.ПользовательскиеНастройки.Элементы.Найти(
					текОтбор.ИдентификаторПользовательскойНастройки);
				Если ПользовательскаяНастройка <> Неопределено Тогда
					текОтбор = ПользовательскаяНастройка;
				КонецЕсли;
			КонецЕсли;
			текОтбор.Использование = Истина;
			текОтбор.ПравоеЗначение = текАргумент.Значение;
			Прервать;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

Процедура НазначитьАргументыПоИдентификаторам(ТаблицаАргументов, Компоновщик, ВходныеПараметры)

	Для Каждого текАргумент Из ТаблицаАргументов Цикл
		
		// Пропустим, если значение аргумента не передали
		Если Не ВходныеПараметры.Свойство(текАргумент.Имя) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПустаяСтрока(текАргумент.ИдентификаторНастройки) Тогда
			Продолжить;
		КонецЕсли;
		
		ИдентификаторНастройки = ИдентификаторКомпоновкиИзСтроки(текАргумент.ИдентификаторНастройки);
		Настройка = Компоновщик.ПользовательскиеНастройки.ПолучитьОбъектПоИдентификатору(ИдентификаторНастройки);
		ТипНастройки = ТипЗнч(Настройка);
		Если ТипНастройки = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Настройка.Использование = Истина;
			Настройка.ПравоеЗначение = текАргумент.Значение;
		ИначеЕсли ТипНастройки = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
			Настройка.Использование = Истина;
			Настройка.Значение = текАргумент.Значение;
		Иначе
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Функция ИдентификаторКомпоновкиИзСтроки(Строка)

	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(Строка);
	Пакет = ФабрикаXDTO.Пакеты.Получить("http://v8.1c.ru/8.1/data-composition-system/core");
	Тип = Пакет.Получить("ID");
	XDTO = ФабрикаXDTO.ПрочитатьXML(Чтение, Тип);
	Возврат СериализаторXDTO.ПрочитатьXDTO(XDTO);

КонецФункции // ИдентификаторКомпоновкиИзСтроки()

Процедура ЗалогироватьНачалоВызова(Метод, Аргументы, ЗапросHTTP = Неопределено)

	ШаблонСообщения = 
	"Вызван метод ""%1"" со следующими аргументами:
	|
	|%2";
	
	МассивСообщенийАргументы = Новый Массив;
	Для Каждого текСтрока Из Аргументы Цикл
		МассивСообщенийАргументы.Добавить(СтрШаблон("%1: %2", текСтрока.Ключ, текСтрока.Значение));
	КонецЦикла;
	
	Если ЗапросHTTP <> Неопределено Тогда
		МассивСообщенийАргументы.Добавить("");
		МассивСообщенийАргументы.Добавить("Заголовки запроса:");
		Для Каждого текСтрока Из ЗапросHTTP.Заголовки Цикл
			Если НРег(текСтрока.Ключ) = "authorization" Тогда
				Продолжить;
			КонецЕсли;
			МассивСообщенийАргументы.Добавить(СтрШаблон("%1: %2", текСтрока.Ключ, текСтрока.Значение));
		КонецЦикла;
	КонецЕсли;
	
	СообщениеДляЖурнала = СтрШаблон(ШаблонСообщения, Метод, СтрСоединить(МассивСообщенийАргументы, Символы.ПС));
	
	скт_ОбщегоНазначенияВызовСервера.ЗаписатьВЖурнал("Начало вызова метода", СообщениеДляЖурнала, , Метод);
	
КонецПроцедуры

Процедура ЗалогироватьОкончаниеВызова(Метод, РезультатКомпоновки, РасширениеФайла, ЗапросHTTP = Неопределено)

	ШаблонСообщения = 
	"Получен результат метода %1:
	|
	|%2
	|
	|Результат выгружен в файл %3";
	
	Если ТипЗнч(РезультатКомпоновки) = Тип("ТаблицаЗначений") Тогда
		текстРезультат = СтрШаблон("Таблица значении, количество колонок %1, количество строк выборки %2", 
			РезультатКомпоновки.Колонки.Количество(), РезультатКомпоновки.Количество());
	Иначе
		текстРезультат = СтрШаблон("Табличный документ, количество колонок %1, количество строк в документе %2", 
			РезультатКомпоновки.ШиринаТаблицы, РезультатКомпоновки.ВысотаТаблицы);
	КонецЕсли;
	
	СообщениеДляЖурнала = СтрШаблон(ШаблонСообщения, Метод, текстРезультат, РасширениеФайла);
	
	Если ЗапросHTTP <> Неопределено Тогда
		МассивСообщенийАргументы = Новый Массив;
		МассивСообщенийАргументы.Добавить(Символы.ПС);
		МассивСообщенийАргументы.Добавить("Заголовки запроса:");
		Для Каждого текСтрока Из ЗапросHTTP.Заголовки Цикл
			Если НРег(текСтрока.Ключ) = "authorization" Тогда
				Продолжить;
			КонецЕсли;
			МассивСообщенийАргументы.Добавить(СтрШаблон("%1: %2", текСтрока.Ключ, текСтрока.Значение));
		КонецЦикла;
		СообщениеДляЖурнала = СообщениеДляЖурнала + СтрСоединить(МассивСообщенийАргументы, Символы.ПС);
	КонецЕсли;
	
	скт_ОбщегоНазначенияВызовСервера.ЗаписатьВЖурнал("Окончание вызова метода", СообщениеДляЖурнала, , Метод);

КонецПроцедуры

Функция ЭтоФорматДляВыводаВТаблицу(Формат)

	Возврат Формат = Перечисления.скт_ВариантыФорматовВыгрузки.CSV 
		Или Формат = Перечисления.скт_ВариантыФорматовВыгрузки.JSON
		Или Формат = Перечисления.скт_ВариантыФорматовВыгрузки.XML 
		Или Формат = Перечисления.скт_ВариантыФорматовВыгрузки.ПроизвольнаяСериализация;

КонецФункции // ЭтоФорматДляВыводаВТаблицу()

#КонецОбласти

#КонецЕсли