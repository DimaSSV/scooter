
#Область ПрограммныйИнтерфейс

Функция УстановитьСхемуКомпоновкиВФорме(ЭтотОбъект, СхемаКомпоновки, АдресСхемыКомпоновки, КомпоновщикНастроек = Неопределено, ПриОшибкеЗагружатьПустуюСхему = Истина,
	УдалятьНедоступныеНастройки = Истина) Экспорт 
	
	Результат = скт_КомпоновкаДанныхКлиентСервер.УстановитьСхемуКомпоновкиВФорме(ЭтотОбъект, СхемаКомпоновки, АдресСхемыКомпоновки, КомпоновщикНастроек, ПриОшибкеЗагружатьПустуюСхему, УдалятьНедоступныеНастройки);
	Возврат Результат;

КонецФункции

Функция НоваяСхемаПоТекстуЗапроса(Знач ТекстЗапроса) Экспорт 

	ИмяИсточника =	"ИсточникДанных1";
	ТипИсточника =	"Local";
	ИмяНабора =		"НаборДанных1";
	
	Схема = Новый СхемаКомпоновкиДанных;
	
	ИсточникДанных = Схема.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя = ИмяИсточника;
	ИсточникДанных.ТипИсточникаДанных = ТипИсточника;
	
	НаборДанных = Схема.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Имя = ИмяНабора;
	НаборДанных.ИсточникДанных = ИсточникДанных.Имя;
	НаборДанных.Запрос = ТекстЗапроса;
	НаборДанных.АвтоЗаполнениеДоступныхПолей = Истина;

	ЗаполнитьПараметрыСхемы(Схема);
	
	Возврат Схема;

КонецФункции // НоваяСхемаПоТекстуЗапроса()

Функция Скомпоновать(Знач Схема, Знач Настройка = Неопределено, ПриемникВывода = Неопределено,
	ВнешниеНаборы = Неопределено, ОтключитьОбщиеИтоги = Истина, МенеджерВременныхТаблиц = Неопределено) Экспорт

	Если Настройка = Неопределено Тогда
		Настройка = Схема.НастройкиПоУмолчанию;
	КонецЕсли;
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Схема));
	КомпоновщикНастроек.ЗагрузитьНастройки(Настройка);
	
	Если Не КоличествоАктивныхЭлементов(Настройка.Выбор.Элементы) Тогда
		// если не выбрано ни одного поля, то добавим все доступные поля
		Для Каждого текДоступноеПоле Из КомпоновщикНастроек.Настройки.Выбор.ДоступныеПоляВыбора.Элементы Цикл
			ДобавитьВыбранноеПолеПоДоступному(КомпоновщикНастроек.Настройки.Выбор.Элементы, текДоступноеПоле);
		КонецЦикла;
	КонецЕсли;
	
	Если Не КоличествоАктивныхЭлементов(Настройка.Структура) Тогда
		// если не задана структура, добавим детальные записи
		Группа = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		Группа.ПоляГруппировки.Элементы.Добавить(Тип("АвтоПолеГруппировкиКомпоновкиДанных"));
		Группа.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	КонецЕсли;
	
	Если ОтключитьОбщиеИтоги Тогда 
		КомпоновщикНастроек.Настройки.ПараметрыВывода.УстановитьЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ГоризонтальноеРасположениеОбщихИтогов"), РасположениеИтоговКомпоновкиДанных.Нет);
		КомпоновщикНастроек.Настройки.ПараметрыВывода.УстановитьЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВертикальноеРасположениеОбщихИтогов"), РасположениеИтоговКомпоновкиДанных.Нет);
	КонецЕсли;
	
	Если ПриемникВывода = Неопределено Тогда
		ПриемникВывода = Новый ТабличныйДокумент;
	КонецЕсли;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных; 
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	Если ТипЗнч(ПриемникВывода) = Тип("ТабличныйДокумент") Тогда
		Макет = ПолучитьМакет(Схема, КомпоновщикНастроек.ПолучитьНастройки(), Тип("ГенераторМакетаКомпоновкиДанных"), ДанныеРасшифровки);
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		ПроцессорВывода.УстановитьДокумент(ПриемникВывода);
	Иначе
		Макет = ПолучитьМакет(Схема, КомпоновщикНастроек.ПолучитьНастройки(), Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"), ДанныеРасшифровки);
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ПроцессорВывода.УстановитьОбъект(ПриемникВывода);
	КонецЕсли;

	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(Макет, ВнешниеНаборы, ДанныеРасшифровки, Истина,, МенеджерВременныхТаблиц);
	
	// ToDo Возможность прервать вывод через проверку адреса временного хранилища?
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	Возврат ПриемникВывода;

КонецФункции // Скомпоновать()

Функция ПолучитьМакет(Схема, Настройки, ТипГенератора, ДанныеРасшифровки = Неопределено, МакетОформления = Неопределено) Экспорт

	Компоновщик = Новый КомпоновщикМакетаКомпоновкиДанных;
	Возврат Компоновщик.Выполнить(Схема, Настройки, ДанныеРасшифровки, МакетОформления, ТипГенератора);

КонецФункции // ПолучитьМакет()


#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс
// Код процедур и функций
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьПараметрыСхемы(Схема)

	Для Каждого текНабор Из Схема.НаборыДанных Цикл
		Если ТипЗнч(текНабор) = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных") Тогда
			ЗаполнитьПараметрыСхемыПоНабору(Схема.Параметры, текНабор);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьПараметрыСхемыПоНабору(Параметры, НаборДанных)
	
	Запрос = Новый Запрос(НаборДанных.Запрос);
	ПараметрыЗапроса = Запрос.НайтиПараметры();
	Для Каждого текПараметр Из ПараметрыЗапроса Цикл
		Если Параметры.Найти(текПараметр.Имя) = Неопределено Тогда
			НовыйПараметр = Параметры.Добавить();
			НовыйПараметр.Имя = текПараметр.Имя;
			НовыйПараметр.ТипЗначения = текПараметр.ТипЗначения;
			НовыйПараметр.ДоступенСписокЗначений = СтрНайти(Запрос.Текст, СтрШаблон("(&%1", текПараметр.Имя)) > 0;
			НовыйПараметр.ВключатьВДоступныеПоля = Истина;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Функция КоличествоАктивныхЭлементов(Коллекция)

	Результат = 0;
	Для Каждого текЭлемент Из Коллекция Цикл
		Если текЭлемент.Использование Тогда
			Результат = Результат + 1;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;

КонецФункции // КоличествоАктивныхЭлементов()

Процедура ДобавитьВыбранноеПолеПоДоступному(Коллекция, ДоступноеПоле)

	Если ДоступноеПоле.Папка Тогда
		НовоеПоле = Коллекция.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		НовоеПоле.Поле = ДоступноеПоле.Поле;
		Для Каждого текДоступноеПоле Из ДоступноеПоле.Элементы Цикл
			ДобавитьВыбранноеПолеПоДоступному(НовоеПоле.Элементы, текДоступноеПоле);
		КонецЦикла;
	Иначе
		НовоеПоле = Коллекция.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		НовоеПоле.Поле = ДоступноеПоле.Поле;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

